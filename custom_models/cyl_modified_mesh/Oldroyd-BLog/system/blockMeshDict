/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Website:  https://openfoam.org                  |
|   \\  /    A nd           | Version:  9                                     |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices
(
  (-5 0 0) //0
  (-2.83 0 0)
  (-1 0 0)
  (-0.7071067812 0.7071067812 0)
  (-0.3826834324 0.9238795325 0)
  (0 1 0) //5
  (0.3826834324 0.9238795325 0)
  (0.7071067812 0.7071067812 0)
  (1 0 0)
  (2.83 0 0)
  (5 0 0) //10
  (5 2 0)
  (2 2 0)
  (0.83 2 0)
  (0 2 0)
  (-0.83 2 0) //15
  (-2 2 0)
  (-5 2 0) //End 17
//repeat the points on the z=1 plane
  (-5 0 1)//18
  (-2.83 0 1)
  (-1 0 1)//20
  (-0.7071067812 0.7071067812 1)
  (-0.3826834324 0.9238795325 1)
  (0 1 1)
  (0.3826834324 0.9238795325 1)
  (0.7071067812 0.7071067812 1)//25
  (1 0 1)
  (2.83 0 1)
  (5 0 1)
  (5 2 1)
  (2 2 1)//30
  (0.83 2 1)
  (0 2 1)
  (-0.83 2 1)
  (-2 2 1)
  (-5 2 1)//35
  //new points
  
  

);

blocks
(
    hex (0 1 16 17 18 19 34 35) (33 40 1) simpleGrading (0.012 1 1) //0  first 4 points describe a plane. then vertex 4 is connected to vertex 0 by moving away from the defined plane. similar for 5,6,7
    								   // thus a total of 8 vertices are used to define the points of the block. 
    								   // the next set of values defines the number of cells in the x1,x2,and x3 directions
    								   // the grading function defines a ratio for cell expansion/contraction in each direction.
    								   // it is a ratio between the ending block length and the starting block length along the axis
    								   // therefore, the length of the end cell along the x1 axis will be 0.12 times the length of the starting cell along the x1 axis
    hex (2 3 16 1 20 21 34 19) (40 43 1) simpleGrading (1 30 1) //1
    hex (3 4 15 16 21 22 33 34) (23 43 1) simpleGrading (0.5 30 1) //2
    hex (4 5 14 15 22 23 32 33) (23 43 1) simpleGrading (1 30 1) //3 
    hex (5 6 13 14 23 24 31 32) (23 43 1) simpleGrading (1 30 1) //4 
    hex (6 7 12 13 24 25 30 31) (20 43 1) simpleGrading (2 30 1) //5
    hex (7 8 9 12 25 26 27 30) (60 43 1) simpleGrading (0.2 30 1) //6
    hex (9 10 11 12 27 28 29 30) (50 60 1) simpleGrading (20 5 1) //7
   

);

edges
(
  arc 5 6 (0.195090322 0.9807852804 0) //interpolation point for connecting the two vertices (specifies arc length/depth)
  arc 6 7 (0.555570233 0.8314696123 0)
  arc 7 8 (0.9238795325 0.3826834324 0)
  arc 12 9 (2.614579077 1.0829941136 0)

  arc 4 5 (-0.195090322 0.9807852804 0)
  arc 3 4 (-0.555570233 0.8314696123 0)
  arc 2 3 (-0.9238795325 0.3826834324 0)
  arc 1 16 (-2.614579077 1.0829941136 0)
//the second half is to form the circle on the z=1 plane
  arc 23 24(0.195090322 0.9807852804 1)
  arc 24 25 (0.555570233 0.8314696123 1)
  arc 25 26 (0.9238795325 0.3826834324 1)
  arc 30 27 (2.614579077 1.0829941136 1)

  arc 22 23 (-0.195090322 0.9807852804 1)
  arc 21 22 (-0.555570233 0.8314696123 1)
  arc 20 21 (-0.9238795325 0.3826834324 1)
  arc 19 34 (-2.614579077 1.0829941136 1)

);

boundary
(

    inlet
    {
      type patch;
      faces
      (
            (0 17 35 18)
            
        );
    }
    walls
    {
        type wall;
        faces
        (
            (17 16 34 35)
            
            (16 15 33 34)
            
            (15 14 32 33)
            (14 13 31 32)
            (13 12 30 31)
            (12 11 29 30)
        );
    }
    cylinder
    {
        type wall;
        faces
        (
           
            (2 3 21 20)
            (3 4 22 21)
            (4 5 23 22)
            (5 6 24 23)
            (6 7 25 24)
            (7 8 26 25) 
            
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (10 11 29 28)
            
            
        );
    }    
    frontAndBack
    {
        type empty;
        faces
        (
            (0 1 16 17)
            (1 2 3 16)
            (3 4 15 16)
            (4 5 14 15)
            (5 6 13 14)
            (6 7 12 13)
            (7 8 9 12)
            (9 10 11 12)
            
            (18 19 34 35)
            (19 20 21 34)
            (21 22 33 34)
            (22 23 32 33)
            (23 24 31 32)
            (24 25 30 31)
            (25 26 27 30)
            (27 28 29 30)
        );
    }     
);

mergePatchPairs
(
);

// ************************************************************************* //
